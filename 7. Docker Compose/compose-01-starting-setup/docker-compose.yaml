# Docker Compose Format Version
# 현재 컴포즈 문서의 포맷을 버전으로 판단함
# https://docs.docker.com/compose/compose-file/compose-versioning/
version: "3.8"

# 명명 볼륨 추가할 경우 여기에 서비스에서 사용중인 볼륨을 정의해야 한다.networks:
# 이 볼륨은 서비스의 컨테이너 간 공유해서 사용할 수 있다.
volumes:
  data:
  logs:


# services
# 필요한 컨테이너를 정의
# -d --rm 옵션이 디폴트임
services:

  # mongodb container
  # container 이름 아님 유의, 그러나 다른 코드에서 이름 그대로 사용할 수 있음
  mongodb:
    # image : 완성된 이미지나 hub에 있는 이미지를 사용할 경우
    image: "mongo"
    # volume -v
    volumes:
      - data:/data/db
    # container 이름 자동 생성하고 싶지 않으면 이 옵션을 사용한다.
    container_name: mongodb
    # env -e
    # environment:
      #- MONGO_INITDB_ROOT_USERNAME=max 문법 1
    #  MONGO_INITDB_ROOT_USERNAME: max
    #  MONGO_INITDB_ROOT_PASSWORD: secret
    # env file : -env-file : compose 파일 기준 상대 경로로 기입
    env_file:
      - mongodb.env
    # networks: 동일한 컴포즈 파이르이 서비스는 자동으로 동일한 네트워크에 속함
    # networks: 를 사용할 경우는 기존 네트워크를 사용하고 싶을 때 사용
  backend:
    #build : 이미지를 빌드해서 사용 #build: ./backend는 shotcut
    #Dockerfile경로를 찾으면 됨
    #아래 명령어는 ./backend/Dockerfile을 사용해서 이미지 빌드
    build:
      # context는 주의해야 함, 이거 나중에 설정
      context: ./backend
      dockerfile: Dockerfile
    # env -e
    environment:
      MONGODB_USERNAME: max
      MONGODB_PASSWORD: secret
    #   depends_on -> docker compose 전용 옵션
    # docker compose는 동시에 컨테이너 생성됨
    # 이때 depends_on는 이 컨테이너가 특정 컨테이너 의존함을 알려주어서
    # 컨테이너 생성 순서를 조절할 수 있다.
    depends_on:
      - mongodb
    # port -p
    ports:
      - "80:80"
    volumes:
      - logs:/app/logs
      # 익명 볼륨은 volumes에 추가할 필요 없음
      - /app/node_modules
      # /Users/anbyeonghyeon/Documents/00.repositoy/Docker_Udemy/7. Docker Compose/compose-01-starting-setup/backend:/app
      # compose 파일 기준으로 상대경로 가능, 아래는 위와 같음
      # 바인드 마인트는 volumes에 추가할 필요 없음
      - ./backend:/app

  frontend:
      build: ./frontend
      ports:
        - "3000:3000"
      volumes:
        - ./frontend/src:/app/src
      depends_on:
        - backend
    # stdin_open + tty -it
      stdin_open: true
      tty: true
